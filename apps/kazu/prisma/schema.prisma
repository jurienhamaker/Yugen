// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
  binaryTargets = ["darwin-arm64", "linux-static-x64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Settings {
  id                                Int         @id @default(autoincrement())
  guildId                           String      @unique
  botUpdatesChannelId               String?

  channelId                         String?
  cooldown                          Int         @default(0)
  math                              Boolean     @default(true)
  shameRoleId                       String?
  removeShameRoleAfterHighscore     Boolean     @default(false)

  lastShameUserId                   String?

  games                             Game[]

  highscore                         Int         @default(0)
  highscoreDate                     DateTime?

  saves                             Float       @default(0)
  maxSaves                          Float       @default(2)
  savesUsed                         Float       @default(0)

  // timestamps
  createdAt                         DateTime    @default(now())
  updatedAt                         DateTime    @updatedAt

  @@index([guildId])
}

model Game {
  id                Int         @id @default(autoincrement())
  guildId           String
  lastMessageId     String?

  settings          Settings    @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: Cascade)

  history           History[]

  status            GameStatus  @default(IN_PROGRESS)
  type              GameType    @default(NORMAL)

  isHighscored      Boolean     @default(false)

  // timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([guildId])
}

model History {
  id                Int         @id @default(autoincrement())
  userId            String
  messageId         String?

  game              Game        @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  gameId            Int

  number            Int

  // timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([userId, gameId])
}

model PlayerStats {
  id                Int         @id @default(autoincrement())
  userId            String
  guildId           String
  inGuild           Boolean     @default(true)

  points            Int         @default(0)

  // timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([userId, guildId])
}

model PlayerSaves {
  id                Int         @id @default(autoincrement())
  userId            String

  saves             Float       @default(0)
  maxSaves          Float       @default(2)
  lastVoteTime      DateTime?

  // timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([userId])
}

enum GameStatus {
  IN_PROGRESS
  FAILED
  COMPLETED
}

enum GameType {
  NORMAL
}
